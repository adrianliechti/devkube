logging {
	level  = "info"
	format = "logfmt"
}

prometheus.remote_write "platform" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

otelcol.exporter.prometheus "platform" {
  forward_to = [
    prometheus.remote_write.platform.receiver,
  ]
}

loki.write "platform" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

otelcol.exporter.loki "platform" {
  forward_to = [
    loki.write.platform.receiver,
  ]
}

otelcol.exporter.otlp "platform" {
  client {
    endpoint = "tempo:4317"

    tls {
      insecure             = true
      insecure_skip_verify = true
    }
  }
}

otelcol.receiver.otlp "default" {
  grpc {}
  http {}
  output {
    logs    = [otelcol.exporter.loki.platform.input]
    metrics = [otelcol.exporter.prometheus.platform.input]    
    traces  = [otelcol.exporter.otlp.platform.input]
  }
}

discovery.kubernetes "pod" {
  role = "pod"
}

discovery.kubernetes "pods" {
	role = "pod"
}

discovery.kubernetes "nodes" {
	role = "node"
}

discovery.kubernetes "services" {
	role = "service"
}

discovery.kubernetes "endpoints" {
	role = "endpoints"
}

discovery.kubernetes "endpointslices" {
	role = "endpointslice"
}

discovery.kubernetes "ingresses" {
	role = "ingress"
}

local.file_match "node_logs" {
  path_targets = [{
      __path__  = "/var/log/syslog",
      job       = "node/syslog",
      node_name = sys.env("HOSTNAME"),
      cluster   = "platform",
  }]
}

loki.source.file "node_logs" {
  targets    = local.file_match.node_logs.targets
  forward_to = [loki.write.platform.receiver]
}

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  stage.static_labels {
      values = {
        cluster = "platform",
      }
  }

  forward_to = [loki.write.platform.receiver]
}

loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"

  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

loki.process "cluster_events" {
  forward_to = [loki.write.platform.receiver]

  stage.static_labels {
    values = {
      cluster = "platform",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }
}